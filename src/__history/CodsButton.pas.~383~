unit CodsButton;

interface

uses
  System.SysUtils,
  System.Classes,
  Vcl.Controls,
  MetroTools,
  Messaging,
  Winapi.Windows,
  Vcl.Forms,
  CodCPSharedLib,
  Vcl.ExtCtrls,
  Vcl.Graphics,
  Vcl.Styles,
  Vcl.Themes,
  System.UITypes;

type
  CButton = class;
  CButtonState = (mbsLeave, mbsEnter, mbsDown);
  CButtonAnimateEngine = (cbneComponent, cbneAtDraw);
  //CButtonIconAlign = (cbiaLeft, cbiaRight, cbiaTop, cbiaBottom);
  CButtonIcon = (cicNone, cicYes, cicNo, cicTrueYes, cicNoAllow, cicQuestion, cicWarning, cicStart, cicNext, cicBack, cicEnter, cicRetry, cicDownload, cicUpload, cicSearch, cicSearchL);
  CButtonStateChange = procedure(Sender: CButton; State: CButtonState) of object;
  CButtonPreset = (cbprCustom, cbprFluent, cbprFluentRound, cbprMetro, cbprMetroSimple, cbprMetroFade, cbprFluentGray, cbprClassic, cbprNewClassic, cbprGlobalApplyColor, cbprWin32);

  CButtonPresets = class(TMPersistent)
    private
      FrColor : TColor;
      FpKind : CButtonPreset;
      FAutoPen,
      FApplyOnce, FIgnGbSync: boolean;
      function Paint : Boolean;
      function ChangeColorSat(clr: TColor; perc: integer): TColor;
    published
      property Color : TColor read FrColor write FrColor stored Paint;
      property Kind : CButtonPreset read FpKind write FpKind stored Paint;
      property PenColorAuto : boolean read FAutoPen write FAutoPen stored Paint;
      property ApplyOnce : boolean read FApplyOnce write FApplyOnce stored Paint;
      property IgnoreGlobalSync : boolean read FIgnGbSync write FIgnGbSync stored Paint;
  end;

  CButtonUnderLine = class(TMPersistent)
    private
      FUnderThick: integer;
      FUnderLn, FUnderLnRound: boolean;
      procedure SetUline(const Value: boolean);
      procedure SetULRound(const Value: boolean);
      procedure SetUlThick(const Value: integer);
    published
      property Enable : boolean read FUnderLn write SetUline;
      property UnderLineRound : boolean read FUnderLnRound write SetULRound;
      property UnderLineThicknes : integer read FUnderThick write SetUlThick;
  end;

  CButtonColors = class(TMPersistent)
    private
      FEnter, FLeave, FDown: TColor;
      FLine: TColor;
      function Paint : Boolean;
    published
      property Enter : TColor read FEnter write FEnter stored Paint;
      property Leave : TColor read FLeave write FLeave stored Paint;
      property Down : TColor read FDown write FDown stored Paint;
      property BLine : TColor read FLine write FLine stored Paint;
  end;

  CButtonAnimations = class(TMPersistent)
    private
      FPAn, FFadeAnimation: boolean;
      FAnimdelay, FAnimshq, TimeProg, FFadeSpeed: integer;
      FAnimateEngine: CButtonAnimateEngine;
    published
      property PressAnimation : boolean read FPAn write FPAn;
      property PADelay : integer read FAnimdelay write FAnimdelay;
      property PAShrinkAmount : integer read FAnimshq write FAnimshq;
      property PAAnimateEngine : CButtonAnimateEngine read FAnimateEngine write FAnimateEngine;

      property FadeAnimation: boolean read FFadeAnimation write FFadeAnimation;
      property FASpeed: integer read FFadeSpeed write FFadeSpeed;
  end;

  CButtonPen = class(TMPersistent)
    private
      FColor : TColor;
      FWidth : integer;
      FEnablePenAlt,
      FSyncBgColor: boolean;
      FCPenDown: TColor;
      FCPenHover: TColor;
      exceptpreset: boolean;
      function Paint : Boolean;
    published
      property Color : TColor read FColor write FColor stored Paint;
      property Width : integer read FWidth write FWidth stored Paint;
      property EnableAlternativeColors : boolean read FEnablePenAlt write FEnablePenAlt stored Paint;
      property FormSyncedColor : boolean read FSyncBgColor write FSyncBgColor;
      property AltHoverColor : TColor read FCPenHover write FCPenHover stored Paint;
      property AltPressColor : TColor read FCPenDown write FCPenDown stored Paint;
      property GlobalPresetExcept: boolean read exceptpreset write exceptpreset;
  end;

  CButton = class(TCustomControl)
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
  private
    FAuthor, FSite, FVersion: string;
    FonStateChange: CButtonStateChange;
    FPreset: CButtonPresets;
    FColors: CButtonColors;
    FPen: CButtonPen;
    FBitmap: TBitmap;
    FMBTColor: TColor;
    FTextColors: CButtonColors;
    FAnimations: CButtonAnimations;
    FTransparent,
    FCustTColor,
    FFlatBT: Boolean;
    w, h, fs: integer;
    FUnderLine: CButtonUnderLine;
    FCIcon: CButtonIcon;
    FModalResult: TModalResult;
    FRoundAmount: integer;
    FText: string;
    FState, FPreviousState: CButtonState;
    FFont: TFont;
    FControlStyle: TControlStyle;
    ShX, ShY: integer;

    FadeAnim: TTimer;
    
    function FadeBrushColor(from, towhich: CButtonState; progress: integer): TColor;
    
    procedure StTimer;
    procedure SetBitmap(Value: TBitmap);
    procedure SetText(cOnst Value: string);
    procedure SetState(const Value: CButtOnState);
    procedure SetFont(const Value: TFont);
    procedure SetTransparent(const Value: boolean);
    procedure SetRoundVal(const Value: integer);
    procedure SetFlatnes(const Value: boolean);
    procedure ApplyPreset(const Value: CButtonPresets);
    procedure SetIcon(const Value: CButtonIcon);
    procedure SetFMBTColor(const Value: TColor);
    function CheckForGlobalSync: boolean;
    procedure SetFCustColor(const Value: boolean);
    { Private declarations }
  protected
    procedure Paint; override;
    procedure Animation(undo: boolean);
    procedure CMMouseEnter(var Message : TMessage); message CM_MOUSEENTER;
    procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
    procedure MouseDown(Button : TMouseButton; Shift: TShiftState; X, Y : integer); override;
    procedure MouseUp(Button : TMouseButton; Shift: TShiftState; X, Y : integer); override;
    procedure KeyPress(var Key: Char); override;
    procedure Click; override;
    procedure DoEnter; override;
    procedure DoExit; override;
  published
    property OnMouseEnter;
    property OnMouseLeave;
    property OnMouseDown;
    property OnMouseUp;
    property OnMouseMove;
    property OnEnter;
    property OnExit;
    property ModalResult: TModalResult read FModalResult write FModalResult default 0;
    property OnKeyPress;
    property OnKeyDown;
    property OnKeyUp;
    property OnClick;
    property OnStateChange : CButtOnStateChange read FOnStateChange write FOnStateChange;

    property Action;
    property ShowHint;
    property TabStop;
    property TabOrder;
    property Align;
    property Anchors;
    property Constraints;
    property Cursor;
    property Visible;
    property Enabled;
    property DoubleBuffered;

    procedure FTimerAct(Sender: TObject);

    property BmpTransparentColor: TColor Read FMBTColor Write SetFMBTColor;
    property BIcoBitmap: TBitmap Read FBitmap Write SetBitmap;
    property ButtonIcon: CButtonIcon read FCIcon write SetIcon;
    property BmpCustomTrColor: boolean read FCustTColor write SetFCustColor;

    property ControlStyle : TControlStyle read FControlStyle write FControlStyle;
    property Font : TFont read FFont write SetFont stored True;
    property Text : string read FText write SetText;
    property RoundTransparent : boolean read FTransparent write SetTransparent;
    property RoundAmount : integer read FRoundAmount write SetRoundVal;
    property State : CButtonState read FState write SetState;
    property FlatButton : boolean read FFlatBT write SetFlatnes;
    property Colors : CButtonColors read FColors write FColors;
    property Preset : CButtonPresets read FPreset write ApplyPreset;
    property UnderLine: CButtonUnderLine read FUnderLine write FUnderLine;
    property TextColors : CButtOnColors read FTextColors write FTextColors;
    property Pen : CButtonPen read FPen write FPen;
    property Animations: CButtonAnimations read FAnimations write FAnimations;

    property &&&Author: string Read FAuthor;
    property &&&Site: string Read FSite;
    property &&&Version: string Read FVersion;
  public
    procedure SetFocus(); override;
    procedure Invalidate; override;
  end;

procedure Register;

const
  defaultunderln = 6;
  AnimSizeDvz = 500;

var
  GlobalSync: boolean = false;
  gspreset: CButtonPreset = cbprFluent;
  gspresetcolor: TColor = clBlue;

implementation

procedure Register;
begin
  RegisterComponents('Codrut Components', [CButton]);
end;

{ CButtOnColors }
functiOn CButtonColors.Paint: Boolean;
begin
  if Self.Owner is CButton then begin
    CButtOn(Self.Owner).Paint;
    Result := True;
  end else Result := False;
end;

{ CButtOnPen }
functiOn CButtOnPen.Paint: Boolean;
begin
  if Self.Owner is CButton then begin
    CButtOn(Self.Owner).Paint;
    Result := True;
  end else Result := False;
end;

{ CButtOn }

function CButtonPresets.ChangeColorSat(clr: TColor; perc: integer): TColor;
var
  RBGval: longint;
  R, G, B: integer;
begin
  RBGval := ColorToRGB(clr);
  R := GetRValue(RBGval);
  G := GetGValue(RBGval);
  B := GetBValue(RBGval);

  R := R + perc;
  G := G + perc;
  B := B + perc;

  if R < 0 then R := 0;
  if G < 0 then G := 0;
  if B < 0 then B := 0;

  if R > 255 then R := 255;
  if G > 255 then G := 255;
  if B > 255 then B := 255;

  Result := RGB(r,g,b);
end;

procedure CButton.Animation(undo: boolean);
var
  i, x, y: integer;
begin
  if not FAnimations.FPAn then Exit;

  if FAnimations.PAAnimateEngine = cbneAtDraw then begin

  for i := 1 to FAnimations.FAnimshq do begin
    Sleep(FAnimations.FAnimdelay);

    x := round(width div AnimSizeDvz);
    Y := round(width div AnimSizeDvz);

    if x < 1 then x := 1;
    if y < 1 then y := 1;
    

    if undo then begin
      dec(shX, x);
      dec(shY, y);
    end else begin
      inc(shX, x);
      inc(shY, y);
    end;

    FTimerAct(nil);

    Paint;
  end;
  end else
  begin
      if undo then begin
      w := w * -1;
      h := h * -1;
      fs := fs * -1;
    end else begin
      w := trunc(Width / 40);
      h := trunc(Height / 40);
      fs := trunc(FFont.Size / 40);
      if fs = 0 then fs := 1;
      if w = 0 then w := 1;
      if h = 0 then h := 1;
    end;
    //Experiment
    for i := 1 to FAnimations.FAnimshq do begin
      Sleep(FAnimations.FAnimdelay);
      FFont.Size := FFont.Size -fs;
      Width := Width + (w * -1);
      Height := Height + (h * -1);
      Left := Left + round(w / 2);
      Top := Top + round(h / 2);
      Paint;
    end;
  end;
end;

procedure CButton.ApplyPreset(const Value: CButtonPresets);
var
  DB: CButtonPresets;
begin
  FPreset := Value;
  if (Preset.Kind = CButtonPreset.cbprCustom) or ((FPen.exceptpreset) and (FPReset.FpKind <> CButtonPreset.cbprGlobalApplyColor)) then Exit;

  if FPreset.FpKind = CButtonPreset.cbprGlobalApplyColor then
      FPreset.FrColor := gspresetcolor;

  DB := CButtonPresets.Create();
  try
    if FPreset.Color <> clWhite then begin
      FTextColors.FEnter := clWhite;
      FTextColors.FDown := DB.ChangeColorSat(FTextColors.Leave,-5);
      FTextColors.FLeave := clWhite;
      if FPreset.FAutoPen then FPen.Color := clWhite;
      FColors.FLeave := FPreset.Color;
      FColors.Enter := DB.ChangeColorSat(FPreset.Color,40);
      FColors.Down := DB.ChangeColorSat(FPreset.Color,-40);
      FColors.FLine := DB.ChangeColorSat(FPreset.Color,-40);
    end else begin
      FTextColors.FEnter := clBlack;
      FTextColors.FDown := clWhite;
      FTextColors.FLeave := clBlack;
      if FPreset.FAutoPen then FPen.Color := clBlack;
      FColors.FLeave := clWhite;
      FColors.Enter := DB.ChangeColorSat(clWhite,-25);
      FColors.Down := clBlack;
      FColors.FLine := clBlack;
    end;
  finally
    DB.Free;
  end;

  case FPreset.Kind of
    CButtonPreset.cbprFluent: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := true;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 10;
      FFont.Size := 12;
      FFont.Style := [];
      FFont.Name := 'Segoe UI Semibold';
      FPen.Width := 0;
      FFlatBT := false;
      FUnderLine.FUnderLn := true;
      FUnderLine.FUnderLnRound := true;
      FUnderLine.FUnderThick := defaultunderln;
      FAnimations.FPan := false;
      FTransparent := true;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
    CButtonPreset.cbprFluentRound: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := true;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 25;
      FFont.Size := 12;
      FFont.Style := [];
      FFont.Name := 'Segoe UI Semibold';
      FPen.Width := 0;
      FFlatBT := false;
      FUnderLine.FUnderLn := true;
      FUnderLine.FUnderThick := defaultunderln;
      FUnderLine.FUnderLnRound := true;
      FAnimations.FPAn := false;
      FTransparent := true;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
    CButtonPreset.cbprMetroFade: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 0;
      FFont.Size := 12;
      FFont.Style := [];
      FFont.Name := 'Segoe UI Semibold';
      FPen.Width := 2;
      FFlatBT := false;
      FColors.FLine := clWhite;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      FAnimations.FFadeAnimation := true;
    end;
    CButtonPreset.cbprMetroSimple: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 0;
      FFont.Size := 12;
      FFont.Style := [];
      FFont.Name := 'Segoe UI Semibold';
      FPen.Width := 0;
      FFlatBT := false;
      FColors.FLine := clWhite;
        FColors.FDown := clBlack;
        FTextColors.FDown := clWhite;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      FAnimations.FFadeAnimation := false;
    end;
    CButtonPreset.cbprMetro: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 0;
      FFont.Size := 12;
      FFont.Style := [];
      FFont.Name := 'Segoe UI Semibold';
      FPen.Width := 2;
      FFlatBT := false;
      FColors.FLine := clWhite;
      if Pen.Color = clWhite then begin
        FColors.FDown := clWhite;
        FTextColors.FDown := clBlack;
      end else begin
        FColors.FDown := clBlack;
        FTextColors.FDown := clWhite;
      end;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      FAnimations.FFadeAnimation := false;
    end;
    CButtonPreset.cbprFluentGray: begin
      FAnimations.FAnimateEngine := cbneComponent;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := true;
      FRoundAmount := 0;
      FFont.Size := 10;
      FFont.Style := [];
      FFont.Name := 'Segoe UI';
      FPen.Width := 3;
      FFlatBT := false;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := true;
      FAnimations.FAnimshq := 2;
      FAnimations.FAnimdelay := 2;
      FTransparent := false;
      //Always Colors
      FPen.Color := $004E4E4E;
      FPen.AltHoverColor := $00878787;
      FPen.AltPressColor := $00878787;
      FColors.FDown := $00878787;
      FColors.Leave := $004E4E4E;
      FColors.Enter := $004E4E4E;
      FTextColors.FLeave := clWhite;
      FTextColors.FDown := clWhite;
      FTextColors.FEnter := clWhite;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
    CButtonPreset.cbprClassic: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 0;
      FFont.Size := 8;
      FFont.Style := [];
      FFont.Name := 'Tahoma';
      FPen.Width := 1;
      FFlatBT := false;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      //Always Colors
      FColors.FDown := clBtnShadow;
      FColors.Leave := clBtnFace;
      FColors.Enter := clWhite;
      FTextColors.FLeave := clWindowText;
      FTextColors.FDown := clWindowText;
      FTextColors.FEnter := clWindowText;
      FPen.Color := clGray;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
    CButtonPreset.cbprNewClassic: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := false;
      FRoundAmount := 0;
      FFont.Size := 8;
      FFont.Style := [];
      FFont.Name := 'Tahoma';
      FPen.Width := 1;
      FFlatBT := false;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      //Always Colors
      FColors.FDown := clBtnShadow;
      FColors.Leave := clBtnFace;
      FColors.Enter := clWhite;
      FTextColors.FLeave := clWindowText;
      FTextColors.FDown := clWindowText;
      FTextColors.FEnter := clWindowText;
      FPen.Color := clBlue;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
    CButtonPreset.cbprWin32: begin
      FAnimations.FAnimateEngine := cbneAtDraw;
      FPen.FSyncBgColor := false;
      FPen.FEnablePenAlt := true;
      FRoundAmount := 0;
      FFont.Size := 8;
      FFont.Style := [];
      FFont.Name := 'Tahoma';
      FPen.Width := 1;
      FFlatBT := false;
      FUnderLine.FUnderLn := false;
      FAnimations.FPAn := false;
      FTransparent := false;
      //Always Colors
      FColors.FDown := $00F7E4CC;
      FColors.Leave := $00E1E1E1;
      FColors.Enter := $00FBF1E5;
      FTextColors.FLeave := clWindowText;
      FTextColors.FDown := clWindowText;
      FTextColors.FEnter := clWindowText;
      FPen.Color := $00ADADAD;
      FPen.AltHoverColor := $00D77800;
      FPen.AltPressColor := $00995400;
      FAnimations.FFadeAnimation := true;
      FAnimations.FASpeed := 10;
    end;
  end;

  if (FPreset.FpKind <> CButtonPreset.cbprCustom) and FPreset.FApplyOnce then
    Preset.FpKind := CButtonPreset.cbprCustom;
end;

function CButton.CheckForGlobalSync: boolean;
begin
  Result := false;
  if GlobalSync then begin
    FPreset.FpKind := gspreset;
    FPreset.FrColor := gspresetcolor;
    Result := true;
  end;
end;

procedure CButton.Click;
var
  Form: TCustomForm;
begin
  inherited;

  Form := GetParentForm(Self);
  if Form <> nil then Form.ModalResult := ModalResult;
end;

procedure CButton.CMMouseEnter(var Message: TMessage);
begin
  inherited;
  SetState(mbsEnter);
  if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
end;

procedure CButton.CMMouseLeave(var Message: TMessage);
begin
  inherited;
  SetState(mbsLeave);
  if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
end;

constructor CButton.Create(AOwner: TComponent);
begin
  inherited;
  FAuthor                       := 'Petculescu Codrut';
  FSite                         := 'https://www.codrutsoftware.cf';
  FVersion                      := '1.3';

  TabStop := true;

  FColors := CButtOnColors.Create(Self);
  with FColors do begin
    Enter := $00D7821A;
    Leave := $00C57517;
    Down := $008E5611;
    BLine := $008E5611;;
  end;

  FadeAnim := TTimer.Create(Self);
  with FadeAnim do begin
    Interval := 1;
    Enabled := false;
    FadeAnim.OnTimer := FTimerAct;
  end;

  FAnimations := CButtonAnimations.Create;
  with FAnimations do begin
    FAnimations.FPAn := false;
    PAAnimateEngine := cbneAtDraw;
    FAnimdelay := 2;
    FFadeSpeed := 10;
    FAnimshq := 3;
  end;
  
  FTextColors := CButtonColors.Create(Self);
  with FTextColors do begin
    Enter := clWhite;
    Leave := clWhite;
    Down := clWhite;
  end;

  FUnderLine := CButtonUnderLine.Create(Self);
  with FUnderLine do begin
    FUnderLnRound := true;
    FUnderThick := defaultunderln;
    FUnderLn := true;
  end;

  FPreset := CButtonPresets.Create(Self);
  with FPreset do begin
    Kind := CButtonPreset.cbprCustom;
    Color := clBlue;
    FAutoPen := true;
    FApplyOnce := false;
    FIgnGbSync := false;
  end;

  FPen := CButtonPen.Create(self);
  With FPen do begin
    Width := 2;
    Color := clWindow;
    FPen.FEnablePenAlt := false;
    FSyncBgColor := true;
    exceptpreset := false;
  end;

  FFont := TFont.Create;
  with FFont do begin
    Name := 'Segoe UI Semibold';
    Size := 12;
    Color := $00D7821A;
  end;

  FCIcon := cicNone;

  FBitmap := TBitmap.Create;

  FMBTColor := clWhite;

  Width := 110;
  Height := 40;

  FText := 'Click me';
  FState := mbsLeave;

  FCustTColor := false;

  FAnimations.FFadeAnimation := true;

  Pen.Width := 0;
  FTransparent := true;
  FRoundAmount := 10;
end;

destructor CButton.Destroy;
begin
  FreeAndNil( FPen );
  FreeAndNil( FColors );
  FBitmap.Free;
  FBitmap := nil;
  FreeAndNil( FAnimations );
  FadeAnim.Enabled := false;
  FreeAndNil( FUnderLine );
  FreeAndNil( FadeAnim );
  FreeAndNil( FTextColors );
  FreeAndNil( FFont );
  FreeAndNil( FPreset );
  inherited;
end;

procedure CButton.DoEnter;
begin
  inherited;
  SetState(mbsEnter);
end;

procedure CButton.DoExit;
begin
  inherited;
  SetState(mbsLeave);
end;

function Blend(Color1, Color2: TColor; A: Byte): TColor;
var
  c1, c2: LongInt;
  r, g, b, v1, v2: byte;
begin
  A:= Round(2.55 * A);
  c1 := ColorToRGB(Color1);
  c2 := ColorToRGB(Color2);
  v1:= Byte(c1);
  v2:= Byte(c2);
  r:= A * (v1 - v2) shr 8 + v2;
  v1:= Byte(c1 shr 8);
  v2:= Byte(c2 shr 8);
  g:= A * (v1 - v2) shr 8 + v2;
  v1:= Byte(c1 shr 16);
  v2:= Byte(c2 shr 16);
  b:= A * (v1 - v2) shr 8 + v2;
  Result := (b shl 16) + (g shl 8) + r;
end;

function CButton.FadeBrushColor(from, towhich: CButtonState;
  progress: integer): TColor;
var
  c1, c2: TColor;
begin
  c1 := clWhite;
  c2 := clWhite;
  case from of
    mbsDown: if FFlatBt then c1 := FPreset.ChangeColorSat(FPen.Color,-15) else
      c1 := FColors.Down;
    mbsLeave: if FFlatBt then c1 := FPreset.ChangeColorSat(FPen.Color,-3) else
       c1 := FColors.Leave;
    mbsEnter: if FFlatBt then c1 := FPreset.ChangeColorSat(FPen.Color,-5) else
       c1 := FColors.Enter;
  end;
  case towhich of
    mbsDown: if FFlatBt then c2 := FPreset.ChangeColorSat(FPen.Color,-15) else
       c2 := FColors.Down;
    mbsLeave: if FFlatBt then c2 := FPreset.ChangeColorSat(FPen.Color,-3) else
       c2 := FColors.Leave;
    mbsEnter: if FFlatBt then c2 := FPreset.ChangeColorSat(FPen.Color,-5) else
       c2 := FColors.Enter;
  end;

  if FAnimations.FFadeAnimation then
    Result := Blend(c2, c1, progress * (100 div FAnimations.FASpeed))
  else
    Result := c2;
end;

procedure CButton.FTimerAct(Sender: TObject);
begin
  if NOT (FAnimations.TimeProg >= FAnimations.FASpeed) then
  begin
    inc(FAnimations.TimeProg);
     Paint;
  end else
  FadeAnim.Enabled := false;
end;

procedure CButton.Invalidate;
begin
  inherited;
  if not (FPreset.FIgnGbSync) then CheckForGlobalSync;
  Paint;
end;

procedure CButton.KeyPress(var Key: Char);
begin
  inherited;
  if key = #13 then begin
    SetState(mbsDown);
    if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
    Sleep(100);
    //if Assigned(OnClick) then OnClick(Self);
    SetState(mbsEnter);
    Click;
  end;
end;

procedure CButton.MouseDown(Button: TMouseButton; Shift: TShiftState; X,
  Y: integer);
begin
  inherited;
  try
    Self.SetFocus;
  except
    RaiseLastOSError;
  end;
  SetState(mbsDown);
  if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
  Animation(false);
end;

procedure CButton.MouseUp(Button: TMouseButton; Shift: TShiftState; X,
  Y: integer);
begin
  inherited;
  SetState(mbsEnter);
  if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
  Paint;
  Animation(true);
end;

procedure CButton.Paint;
var
  I, h, cst: Integer;
  otext: string;
  drawcanv: TBitMap;
  CRect: TRect;
  bgcolor: TColor;
begin
  inherited;
  if not (FPreset.FIgnGbSync) then CheckForGlobalSync;

  ApplyPreset(FPreset);
                                    
  if FPen.FSyncBgColor then
  begin
    if StrInArray(TStyleManager.ActiveStyle.Name, nothemes) then begin
      FPen.Color := GetParentForm(Self).Color;
    end else
      FPen.Color := TStyleManager.ActiveStyle.GetSystemColor(clBtnFace);
  end;

  drawcanv := TBitMap.Create;
  drawcanv.Height := height;
  drawcanv.Width := width;

  with drawcanv.Canvas do begin
    //Drawing ( + Transparency )
    Brush.Color := FPen.Color;
    if FPen.FEnablePenAlt then begin
      if FState = mbsDown then Brush.Color := FPen.FCPenDown
        else
      if FState = mbsEnter then Brush.Color := FPen.FCPenHover;
    end;
    bgcolor := Brush.Color;
    FillRect( ClipRect );

    Font.Assign( FFont );
    case FState of
      mbsLeave: begin
        Brush.Color := FColors.Leave;
        Font.Color := FTextColors.Leave;
      end;
      mbsEnter: begin
        Brush.Color := FColors.Enter;
        Font.Color := FTextColors.Enter;
      end;
      mbsDown: begin
        Brush.Color := FColors.Down;
        Font.Color := FTextColors.Down;
      end;
    end;

    if FFlatBt then Font.Color := Brush.Color;

    Brush.Color := FadeBrushColor( FPreviousState, FState, FAnimations.TimeProg);
    //Normal Draw
    FillRect( Rect( FPen.Width, FPen.Width, Width - FPen.Width, Height - FPen.Width ) );

    // Text and Icon
    otext := FText;
    h := 0;

    if FBitMap.Empty then begin
    case FCIcon of
      CButtonIcon.cicYes: otext := '✔' + otext;
      CButtonIcon.cicNo: otext := '❌' + otext;
      CButtonIcon.cicNoAllow: otext := '🚫' + otext;
      CButtonIcon.cicTrueYes: otext := '✅ ' + otext;
      CButtonIcon.cicWarning: otext := '⚠' + otext;
      CButtonIcon.cicQuestion: otext := '❔ ' + otext;
      CButtonIcon.cicRetry: otext := '🔁 ' + otext;
      CButtonIcon.cicDownload: otext := '▼ ' + otext;
      CButtonIcon.cicUpload: otext := '▲ ' + otext;
      CButtonIcon.cicStart: otext := '➤ ' + otext;
      CButtonIcon.cicNext: otext := '➜ ' + otext;
      CButtonIcon.cicBack: otext := '⬅ ' + otext;
      CButtonIcon.cicEnter: otext := '➥ ' + otext;
      CButtonIcon.cicSearch: otext := '🔎 ' + otext;
      CButtonIcon.cicSearchL: otext := '🔍 ' + otext;
    end;
    end else begin
      try
        h :=  TextHeight(otext);
        if FText = '' then cst := 0 else cst := 5;
        if h = 0 then h := round(height / 1.2);
        FBitMap.Transparent := true;
        FBitMap.TransparentMode := TTransparentMode.tmAuto;
        if FCustTColor then
          FBitMap.TransparentColor := FMBTColor;
        StretchDraw(Rect( (Width div 2) - ( TextWidth(otext) div 2 ) - h div 2 - cst, height div 2 - h div 2 , (Width div 2) - ( TextWidth(otext) div 2 ) + h div 2 - cst, height div 2 + h div 2 ),FBitMap);
      except
        otext := '🚫' + otext;
      end;
    end;

    TextOut( (Width div 2) - ( (TextWidth(otext) - h ) div 2 ) , (Height div 2) - ( TextHeight(otext) div 2 ) , otext);


    if FUnderLine.FUnderLn then begin
      Brush.Color := FColors.BLine;
      if FUnderLine.FUnderLnRound then begin
        Pen.Color := FColors.BLine;
        Pen.Width := FUnderLine.FUnderThick;
        Brush.Style := bsClear;
        Pen.Style := psSolid;
        RoundRect( Rect( -Pen.Width div 2, -Pen.Width, Width + Pen.Width div 2, Height - FPen.Width), FRoundAmount, FRoundAmount * 3);
      end else begin
        FillRect( Rect( FPen.Width, Height - trunc( Height / 50 * FUnderLine.FUnderThick ), Width - FPen.Width, Height - FPen.Width) );
      end;
    end;

    if FTransparent then begin
      Brush.Style := bsClear;
      if FPen.FEnablePenAlt then
        case State of
          mbsLeave: Pen.Color := FPen.FColor;
          mbsEnter: Pen.Color := FPen.FCPenHover;
          mbsDown: Pen.Color := FPen.FCPenDown;
        end
      else
        Pen.Color := FPen.FColor;
        
      Pen.Width := 1;
      for I := 0 to FRoundAmount do
        RoundRect(0, 0, Width, Height, I, I);
      end;
  end;

  //CRect := Canvas.ClipRect;
  CRect := Rect(ShX, ShY, Width - ShX, Height - ShY);

  Canvas.Brush.Color := bgcolor;
  Canvas.FillRect( Canvas.ClipRect );
  Canvas.CopyRect( CRect,drawcanv.Canvas,drawcanv.Canvas.ClipRect );

  drawcanv.Free;
end;

procedure CButton.SetBitmap(Value: TBitmap);
begin
  FBitmap.Assign(value);
  Invalidate;
end;

procedure CButton.SetFCustColor(const Value: boolean);
begin
  FCustTColor := Value;
  Paint;
end;

procedure CButton.SetFlatnes(const Value: boolean);
begin
  FFlatBT := Value;
  Paint;
end;

procedure CButton.SetFMBTColor(const Value: TColor);
begin
  FMBTColor := Value;
  Paint;
end;

procedure CButton.SetFocus;
begin
  inherited;
  {//OutDated execution
  FState := mbsEnter;
  if Assigned(FOnStateChange) then FOnStateChange(Self, FState);
  Paint;   }
end;

procedure CButton.SetFont(const Value: TFont);
begin
  FFont.Assign( Value );
  Paint;
end;

procedure CButton.SetIcon(const Value: CButtonIcon);
begin
  FCIcon := Value;
  Paint;
end;

procedure CButton.SetRoundVal(const Value: integer);
begin
  FRoundAmount := Value;
  Paint;
end;

procedure CButton.SetState(const Value: CButtonState);
begin
  StTimer;
  FPreviousState := FState;
  FState := Value;
  Paint;
end;

procedure CButton.SetText(const Value: string);
begin
  FText := Value;
  Paint;
end;

procedure CButton.SetTransparent(const Value: boolean);
begin
  FTransparent := Value;
  Paint;
end;

procedure CButton.StTimer;
begin
  if (Parent.Visible) and (Visible) and (Application.Active) and (FAnimations.FFadeAnimation) then begin
    FAnimations.TimeProg := 0;
    FadeAnim.Enabled := true;
  end;
end;

{ CButtonPresets }

function CButtonPresets.Paint: Boolean;
begin
  if Self.Owner is CButton then begin
    CButtOn(Self.Owner).Paint;
    Result := True;
  end else Result := False;
end;

{ CButtonUnderLine }

procedure CButtonUnderLine.SetUline(const Value: boolean);
begin
  FUnderLn := Value;
  CButton(Self.Owner).Paint;
end;

procedure CButtonUnderLine.SetULRound(const Value: boolean);
begin
  FUnderLnRound := Value;
  CButton(Self.Owner).Paint;
end;

procedure CButtonUnderLine.SetUlThick(const Value: integer);
begin
  FUnderThick := Value;
  CButton(Self.Owner).Paint;
end;

end.
