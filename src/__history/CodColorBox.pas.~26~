unit CodColorBox;

interface

uses
  SysUtils,
  Classes,
  Winapi.Windows,
  Vcl.Controls,
  Vcl.Graphics,
  Vcl.ExtCtrls,
  MetroTools,
  System.Math,
  Vcl.Styles,
  Vcl.Forms,
  System.Messaging,
  CodCPSharedLib,
  Vcl.Themes,
  Vcl.Imaging.pngimage;

type
  CColorBox = class;

  CColorBox = class(TCustomTransparentControl)
      constructor Create(AOwner : TComponent); override;
      destructor Destroy; override;
    private
      FColor,
      FBorderColor: TColor;
      FRound,
      FThick: integer;

      FAnim: TTimer;
      FAnimTo,
      FAN: integer;

    procedure InitAnim(tovalue: integer);
    procedure AnimExecute(Sender: TObject);
    procedure SetColor(const Value: TColor);
    procedure SetRound(const Value: integer);
    procedure SetThick(const Value: integer);
    procedure SetPenColor(const Value: TColor);
    function ChangeColorSat(clr: TColor; perc: integer): TColor;
    protected
      procedure Paint; override;
      procedure MouseDown(Button : TMouseButton; Shift: TShiftState; X, Y : integer); override;
      procedure MouseUp(Button : TMouseButton; Shift: TShiftState; X, Y : integer); override;
      procedure CMMouseEnter(var Message : TMessage); message CM_MOUSEENTER;
      procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
      procedure KeyPress(var Key: Char); override;
    published
      property OnMouseEnter;
      property OnMouseLeave;
      property OnMouseDown;
      property OnMouseUp;
      property OnMouseMove;
      property OnClick;

      property Align;
      property Anchors;
      property Cursor;
      property Visible;
      property Enabled;
      property Constraints;
      property DoubleBuffered;
      property TabStop;
      property TabOrder;

      property Color: TColor read FColor write SetColor;
      property PenRound: integer read  FRound write SetRound;
      property PenThick: integer read  FThick write SetThick;
      property PenColor: TColor read FBorderColor write SetPenColor;
  end;

procedure Register;

implementation

procedure Register;
begin
  RegisterComponents('Codrut Components',[CColorBox]);
end;

{ CColorBright }

function CColorBox.ChangeColorSat(clr: TColor; perc: integer): TColor;
var
  RBGval: longint;
  R, G, B: integer;
begin
  RBGval := ColorToRGB(clr);
  R := GetRValue(RBGval);
  G := GetGValue(RBGval);
  B := GetBValue(RBGval);

  R := R + perc;
  G := G + perc;
  B := B + perc;

  if R < 0 then R := 0;
  if G < 0 then G := 0;
  if B < 0 then B := 0;

  if R > 255 then R := 255;
  if G > 255 then G := 255;
  if B > 255 then B := 255;

  Result := RGB(r,g,b);
end;

procedure CColorBox.MouseDown(Button: TMouseButton; Shift: TShiftState; X,
  Y: integer);
begin
  inherited;
  InitAnim(-30);
end;

procedure CColorBox.MouseUp(Button: TMouseButton; Shift: TShiftState; X,
  Y: integer);
begin
  inherited;
  InitAnim(20);
end;


procedure CColorBox.AnimExecute(Sender: TObject);
begin
  if FAN < FAnimTo then inc(FAN, 2);
  if FAN > FAnimTo then dec(FAN, 2);

  if FAN = FAnimTo then FAnim.Enabled := false;

  Paint;
end;

procedure CColorBox.CMMouseEnter(var Message: TMessage);
begin
  InitAnim(20);
end;

procedure CColorBox.CMMouseLeave(var Message: TMessage);
begin
  InitAnim(0);
end;

constructor CColorBox.Create(AOwner: TComponent);
begin
  inherited;
  interceptmouse:=True;

  FAnim := TTimer.Create(Self);
  with FAnim do begin
    Interval := 1;
    Enabled := false;
    OnTimer := AnimExecute;
  end;

  FAN := 0;

  FColor := clAqua;
  FThick := 5;
  FRound := 10;
  FBorderColor := $00313131;

  Width := 50;
  Height := 50;
end;

destructor CColorBox.Destroy;
begin
  FAnim.Enabled := false;
  FreeAndNil(FAnim);
  inherited;
end;


procedure CColorBox.InitAnim(tovalue: integer);
begin
  FAnimTo := tovalue;

  FAnim.Interval := 1;

  FAnim.Enabled := true;
end;

procedure CColorBox.KeyPress(var Key: Char);
begin
  inherited;
  if key = #13 then begin
    FAN := -30;
    Sleep(50);
    if Assigned(OnClick) then OnClick(Self);
    FAN(0);
    Click;
  end;
end;

procedure CColorBox.Paint;
var
  pts: array[1..3] of TPoint;
  sz: integer;
begin
  inherited;

  with canvas do begin
    Pen.Color := FBorderColor;
    Pen.Width := FThick;
    if FThick = 0 then
      Pen.Style := psClear
    else
      Pen.Style := psSolid;

    Pen.Color := ChangeColorSat(Pen.Color, FAN);

    Brush.Color := FColor;

    RoundRect(FThick, FThick, Width - FThick, Height - FThick, FRound, FRound)
  end;
end;

procedure CColorBox.SetColor(const Value: TColor);
begin
  FColor := Value;
  Paint;
end;

procedure CColorBox.SetPenColor(const Value: TColor);
begin
  FBorderColor := Value;
  Paint;
end;

procedure CColorBox.SetRound(const Value: integer);
begin
  FRound := Value;
  Paint;
end;

procedure CColorBox.SetThick(const Value: integer);
begin
  FThick := Value;
  Paint;
end;

end.
